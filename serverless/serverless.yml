# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: archadon # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs4.3
  profile: archadon
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
        - "s3:*"
      Resource: "*"
custom:
  env: ${opt:env, self:provider.stage}
  UserDataTable: ${self:resources.Resources.UserDataTable.Properties.TableName}
  UserItemTable: ${self:resources.Resources.UserItemTable.Properties.TableName}
  ProductDataTable: ${self:resources.Resources.ProductDataTable.Properties.TableName}
  ProductItemTable: ${self:resources.Resources.ProductItemTable.Properties.TableName}

package:
 include:
  - node_modules/**
  - functions/utils/**

functions:
  listenToCreateUserStream:
    handler: functions/handlers.createUserProfile
    events:
       - stream:
          type: dynamodb
          startingPosition: LATEST
          arn:
            Fn::GetAtt:
              - UserItemTable
              - StreamArn
    environment:
      USER_DATA_TABLE: ${self:custom.UserDataTable}
  getUserData:
    handler: functions/handlers.getUserData
    events:
      - http:
          path: user/v1/read/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
    environment:
      USER_PROFILE_TABLE: ${self:custom.UserDataTable}
      USER_TABLE: ${self:custom.UserItemTable}

  updateUserProfile:
    handler: functions/handlers.updateUserProfile
    events:
      - http:
          path: user/v1/update/data/{id}
          method: post
          request:
            parameters:
              paths:
                id: true
    environment:
      USER_PROFILE_TABLE: ${self:custom.UserDataTable}

  updateUserPassword:
    handler: functions/handlers.updateUserPassword
    events:
      - http:
          path: user/v1/update/item/password/{id}
          method: post
          request:
            parameters:
              paths:
                id: true
    environment:
      USER_TABLE: ${self:custom.UserItemTable}

  updateUserEmail:
    handler: functions/handlers.updateUserEmail
    events:
      - http:
          path: user/v1/update/item/email/{id}
          method: post
          request:
            parameters:
              paths:
                id: true
    environment:
      USER_TABLE: ${self:custom.UserItemTable}

  createUser:
    handler: functions/handlers.createUser
    events:
      - http:
          path: user/v1/create
          method: post
    environment:
      TABLE_NAME: ${self:custom.UserItemTable}
  loginUser:
    handler: functions/handlers.loginUser
    events:
      - http:
          path: user/v1/login
          method: post
    environment:
      TABLE_NAME: ${self:custom.UserItemTable}

  createProduct:
    handler: functions/handlers.createProduct
    events:
      - http:
          path: product/v1/create
          method: post
    environment:
      PRODUCT_TABLE: ${self:custom.ProductItemTable}
      USER_TABLE: ${self:custom.UserItemTable}

  updateProductData:
    handler: functions/handlers.updateProductData
    events:
      - http:
          path: product/v1/update/data/{id}
          method: post
          request:
            parameters:
              paths:
                id: true
    environment:
      PRODUCT_DATA_TABLE: ${self:custom.ProductDataTable}
      USER_TABLE: ${self:custom.UserItemTable}

  getProductData:
    handler: functions/handlers.getProductData
    events:
      - http:
          path: product/v1/data/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
    environment:
      PRODUCT_DATA_TABLE: ${self:custom.ProductDataTable}
      PRODUCT_ITEM_TABLE: ${self:custom.ProductItemTable}

resources:
  Resources:
    UserItemTable: ${file(./resources/User/Item.yml)}
    UserDataTable: ${file(./resources/User/Data.yml)}
    ProductItemTable: ${file(./resources/Product/Item.yml)}
    ProductDataTable: ${file(./resources/Product/Data.yml)}

    # ProductTable: ${file(./resources/ProductTable.yml)}
    # ChargeTable: ${file(./resources/ChargeTable.yml)}
    # FavoriteTable: ${file(./resources/FavoriteTable.yml)}
    # ProductMediaTable: ${file(./resources/ProductMediaTable.yml)}
    # TaggedProductTable: ${file(./resources/TaggedProductTable.yml)}
    # TagTable: ${file(./resources/TagTable.yml)}
    # UserProfileTable: ${file(./resources/UserProfileTable.yml)}
    # UserTable: ${file(./resources/UserTable.yml)}
