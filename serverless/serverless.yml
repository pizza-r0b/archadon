# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: archadon # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs4.3
  profile: archadon
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
        - "s3:*"
      Resource: "*"
custom:
  env: ${opt:env, self:provider.stage}
  userTable: UserTable-${self:service}-${self:custom.env}
  userProfileTable: UserProfileTable-${self:service}-${self:custom.env}

package:
 include:
  - node_modules/**
  - functions/utils/**

functions:
  listenToCreateUserStream:
    handler: functions/handlers.createUserProfile
    events:
       - stream:
          type: dynamodb
          startingPosition: LATEST
          arn:
            Fn::GetAtt:
              - UserTable
              - StreamArn
    environment:
      USER_PROFILE_TABLE: ${self:custom.userProfileTable}
  getUserData:
    handler: functions/handlers.getUserData
    events:
      - http:
          path: user/v1/read/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
    environment:
      USER_PROFILE_TABLE: ${self:custom.userProfileTable}
      USER_TABLE: ${self:custom.userTable}

  updateUserPassword:
    handler: functions/handlers.updateUserPassword
    events:
      - http:
          path: user/v1/update/password/{id}
          method: post
          request:
            parameters:
              paths:
                id: true
    environment:
      USER_TABLE: ${self:custom.userTable}

  updateUserEmail:
    handler: functions/handlers.updateUserEmail
    events:
      - http:
          path: user/v1/update/email/{id}
          method: post
          request:
            parameters:
              paths:
                id: true
    environment:
      USER_TABLE: ${self:custom.userTable}

  createUser:
    handler: functions/handlers.createUser
    events:
      - http:
          path: user/v1/create
          method: post
    environment:
      TABLE_NAME: ${self:custom.userTable}
  loginUser:
    handler: functions/handlers.loginUser
    events:
      - http:
          path: user/v1/login
          method: post
    environment:
      TABLE_NAME: ${self:custom.userTable}
resources:
  Resources:
    ProductTable: ${file(./resources/ProductTable.yml)}
    ChargeTable: ${file(./resources/ChargeTable.yml)}
    FavoriteTable: ${file(./resources/FavoriteTable.yml)}
    ProductMediaTable: ${file(./resources/ProductMediaTable.yml)}
    TaggedProductTable: ${file(./resources/TaggedProductTable.yml)}
    TagTable: ${file(./resources/TagTable.yml)}
    UserProfileTable: ${file(./resources/UserProfileTable.yml)}
    UserTable: ${file(./resources/UserTable.yml)}
