{"version":3,"sources":["webpack:///0.js","webpack:///./src/client/components/LazyLoad/observer.js","webpack:///./src/client/components/LazyLoad/poly.js"],"names":["webpackJsonp","./src/client/components/LazyLoad/observer.js","module","exports","__webpack_require__","loadImage","src","_promise2","default","resolve","reject","img","Image","addEventListener","intersectionCb","entries","observer","i","length","entry","node","target","intersectionRatio","unobserve","dataset","then","catch","observe","Object","defineProperty","value","undefined","_promise","obj","__esModule","options","root","rootMargin","threshold","IntersectionObserver","./src/client/components/LazyLoad/poly.js","window","document","IntersectionObserverEntry","this","time","rootBounds","boundingClientRect","intersectionRect","getEmptyRect","isIntersecting","targetRect","targetArea","width","height","intersectionArea","callback","opt_options","Error","nodeType","_checkForIntersections","throttle","bind","THROTTLE_TIMEOUT","_callback","_observationTargets","_queuedEntries","_rootMarginValues","_parseRootMargin","thresholds","_initThresholds","map","margin","unit","join","now","performance","fn","timeout","timer","setTimeout","addEvent","event","opt_useCapture","attachEvent","removeEvent","removeEventListener","detatchEvent","computeRectIntersection","rect1","rect2","top","Math","max","bottom","min","left","right","getBoundingClientRect","el","rect","err","containsDeep","parent","child","getParentNode","parentNode","host","prototype","get","registry","POLL_INTERVAL","some","item","element","_registerInstance","push","_monitorIntersections","filter","_unmonitorIntersections","_unregisterInstance","disconnect","takeRecords","records","slice","opt_threshold","Array","isArray","sort","t","a","isNaN","opt_rootMargin","marginString","margins","split","parts","exec","parseFloat","_monitoringIntersections","_monitoringInterval","setInterval","_domObserver","MutationObserver","attributes","childList","characterData","subtree","clearInterval","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","forEach","rootContainsTarget","_rootContainsTarget","oldEntry","_computeTargetAndRootIntersection","newEntry","_hasCrossedThreshold","getComputedStyle","display","atRoot","parentRect","parentComputedStyle","body","documentElement","overflow","html","clientWidth","clientHeight","_expandRectByRootMargin","newRect","oldRatio","newRatio","indexOf","index","splice"],"mappings":"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","file":"0.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ \"./src/client/components/LazyLoad/observer.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.observer = undefined;\n\nvar _promise = __webpack_require__(\"./node_modules/babel-runtime/core-js/promise.js\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\n__webpack_require__(\"./src/client/components/LazyLoad/poly.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar options = {\n  root: null,\n  rootMargin: '50px 0px',\n  threshold: 0.01\n};\n\nfunction loadImage(src) {\n  return new _promise2.default(function (resolve, reject) {\n    var img = new Image();\n    img.addEventListener('load', resolve);\n    img.addEventListener('error', reject);\n    img.src = src;\n  });\n}\n\nfunction intersectionCb(entries, observer) {\n  var i = entries.length;\n\n  var _loop = function _loop() {\n    var entry = entries[i];\n    var node = entry.target;\n    if (entry.intersectionRatio > 0) {\n      observer.unobserve(entry.target);\n      loadImage(node.dataset.src).then(function () {\n        node.src = node.dataset.src;\n      }).catch(function () {\n        // noop\n      });\n    }\n  };\n\n  for (; i--;) {\n    _loop();\n  }\n}\n\nvar observer = exports.observer = new IntersectionObserver(intersectionCb, options);\n\nfunction observe(node) {\n  observer.observe(node);\n}\n\nexports.default = observe;\n\n/***/ }),\n\n/***/ \"./src/client/components/LazyLoad/poly.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function (window, document) {\n  'use strict';\n\n  // Exits early if all IntersectionObserver and IntersectionObserverEntry\n  // features are natively supported.\n\n  if ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n    // Minimal polyfill for Edge 15's lack of `isIntersecting`\n    // See: https://github.com/w3c/IntersectionObserver/issues/211\n    if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n      Object.defineProperty(window.IntersectionObserverEntry.prototype, 'isIntersecting', {\n        get: function get() {\n          return this.intersectionRatio > 0;\n        }\n      });\n    }\n    return;\n  }\n\n  /**\n   * An IntersectionObserver registry. This registry exists to hold a strong\n   * reference to IntersectionObserver instances currently observering a target\n   * element. Without this registry, instances without another reference may be\n   * garbage collected.\n   */\n  var registry = [];\n\n  /**\n   * Creates the global IntersectionObserverEntry constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n   * @param {Object} entry A dictionary of instance properties.\n   * @constructor\n   */\n  function IntersectionObserverEntry(entry) {\n    this.time = entry.time;\n    this.target = entry.target;\n    this.rootBounds = entry.rootBounds;\n    this.boundingClientRect = entry.boundingClientRect;\n    this.intersectionRect = entry.intersectionRect || getEmptyRect();\n    this.isIntersecting = !!entry.intersectionRect;\n\n    // Calculates the intersection ratio.\n    var targetRect = this.boundingClientRect;\n    var targetArea = targetRect.width * targetRect.height;\n    var intersectionRect = this.intersectionRect;\n    var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n    // Sets intersection ratio.\n    if (targetArea) {\n      this.intersectionRatio = intersectionArea / targetArea;\n    } else {\n      // If area is zero and is intersecting, sets to 1, otherwise to 0\n      this.intersectionRatio = this.isIntersecting ? 1 : 0;\n    }\n  }\n\n  /**\n   * Creates the global IntersectionObserver constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n   * @param {Function} callback The function to be invoked after intersection\n   *     changes have queued. The function is not invoked if the queue has\n   *     been emptied by calling the `takeRecords` method.\n   * @param {Object=} opt_options Optional configuration options.\n   * @constructor\n   */\n  function IntersectionObserver(callback, opt_options) {\n\n    var options = opt_options || {};\n\n    if (typeof callback != 'function') {\n      throw new Error('callback must be a function');\n    }\n\n    if (options.root && options.root.nodeType != 1) {\n      throw new Error('root must be an Element');\n    }\n\n    // Binds and throttles `this._checkForIntersections`.\n    this._checkForIntersections = throttle(this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n    // Private properties.\n    this._callback = callback;\n    this._observationTargets = [];\n    this._queuedEntries = [];\n    this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n    // Public properties.\n    this.thresholds = this._initThresholds(options.threshold);\n    this.root = options.root || null;\n    this.rootMargin = this._rootMarginValues.map(function (margin) {\n      return margin.value + margin.unit;\n    }).join(' ');\n  }\n\n  /**\n   * The minimum interval within which the document will be checked for\n   * intersection changes.\n   */\n  IntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n  /**\n   * The frequency in which the polyfill polls for intersection changes.\n   * this can be updated on a per instance basis and must be set prior to\n   * calling `observe` on the first target.\n   */\n  IntersectionObserver.prototype.POLL_INTERVAL = null;\n\n  /**\n   * Starts observing a target element for intersection changes based on\n   * the thresholds values.\n   * @param {Element} target The DOM element to observe.\n   */\n  IntersectionObserver.prototype.observe = function (target) {\n    // If the target is already being observed, do nothing.\n    if (this._observationTargets.some(function (item) {\n      return item.element == target;\n    })) {\n      return;\n    }\n\n    if (!(target && target.nodeType == 1)) {\n      throw new Error('target must be an Element');\n    }\n\n    this._registerInstance();\n    this._observationTargets.push({ element: target, entry: null });\n    this._monitorIntersections();\n    this._checkForIntersections();\n  };\n\n  /**\n   * Stops observing a target element for intersection changes.\n   * @param {Element} target The DOM element to observe.\n   */\n  IntersectionObserver.prototype.unobserve = function (target) {\n    this._observationTargets = this._observationTargets.filter(function (item) {\n\n      return item.element != target;\n    });\n    if (!this._observationTargets.length) {\n      this._unmonitorIntersections();\n      this._unregisterInstance();\n    }\n  };\n\n  /**\n   * Stops observing all target elements for intersection changes.\n   */\n  IntersectionObserver.prototype.disconnect = function () {\n    this._observationTargets = [];\n    this._unmonitorIntersections();\n    this._unregisterInstance();\n  };\n\n  /**\n   * Returns any queue entries that have not yet been reported to the\n   * callback and clears the queue. This can be used in conjunction with the\n   * callback to obtain the absolute most up-to-date intersection information.\n   * @return {Array} The currently queued entries.\n   */\n  IntersectionObserver.prototype.takeRecords = function () {\n    var records = this._queuedEntries.slice();\n    this._queuedEntries = [];\n    return records;\n  };\n\n  /**\n   * Accepts the threshold value from the user configuration object and\n   * returns a sorted array of unique threshold values. If a value is not\n   * between 0 and 1 and error is thrown.\n   * @private\n   * @param {Array|number=} opt_threshold An optional threshold value or\n   *     a list of threshold values, defaulting to [0].\n   * @return {Array} A sorted list of unique and valid threshold values.\n   */\n  IntersectionObserver.prototype._initThresholds = function (opt_threshold) {\n    var threshold = opt_threshold || [0];\n    if (!Array.isArray(threshold)) threshold = [threshold];\n\n    return threshold.sort().filter(function (t, i, a) {\n      if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n        throw new Error('threshold must be a number between 0 and 1 inclusively');\n      }\n      return t !== a[i - 1];\n    });\n  };\n\n  /**\n   * Accepts the rootMargin value from the user configuration object\n   * and returns an array of the four margin values as an object containing\n   * the value and unit properties. If any of the values are not properly\n   * formatted or use a unit other than px or %, and error is thrown.\n   * @private\n   * @param {string=} opt_rootMargin An optional rootMargin value,\n   *     defaulting to '0px'.\n   * @return {Array<Object>} An array of margin objects with the keys\n   *     value and unit.\n   */\n  IntersectionObserver.prototype._parseRootMargin = function (opt_rootMargin) {\n    var marginString = opt_rootMargin || '0px';\n    var margins = marginString.split(/\\s+/).map(function (margin) {\n      var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n      if (!parts) {\n        throw new Error('rootMargin must be specified in pixels or percent');\n      }\n      return { value: parseFloat(parts[1]), unit: parts[2] };\n    });\n\n    // Handles shorthand.\n    margins[1] = margins[1] || margins[0];\n    margins[2] = margins[2] || margins[0];\n    margins[3] = margins[3] || margins[1];\n\n    return margins;\n  };\n\n  /**\n   * Starts polling for intersection changes if the polling is not already\n   * happening, and if the page's visibilty state is visible.\n   * @private\n   */\n  IntersectionObserver.prototype._monitorIntersections = function () {\n    if (!this._monitoringIntersections) {\n      this._monitoringIntersections = true;\n\n      // If a poll interval is set, use polling instead of listening to\n      // resize and scroll events or DOM mutations.\n      if (this.POLL_INTERVAL) {\n        this._monitoringInterval = setInterval(this._checkForIntersections, this.POLL_INTERVAL);\n      } else {\n        addEvent(window, 'resize', this._checkForIntersections, true);\n        addEvent(document, 'scroll', this._checkForIntersections, true);\n\n        if ('MutationObserver' in window) {\n          this._domObserver = new MutationObserver(this._checkForIntersections);\n          this._domObserver.observe(document, {\n            attributes: true,\n            childList: true,\n            characterData: true,\n            subtree: true\n          });\n        }\n      }\n    }\n  };\n\n  /**\n   * Stops polling for intersection changes.\n   * @private\n   */\n  IntersectionObserver.prototype._unmonitorIntersections = function () {\n    if (this._monitoringIntersections) {\n      this._monitoringIntersections = false;\n\n      clearInterval(this._monitoringInterval);\n      this._monitoringInterval = null;\n\n      removeEvent(window, 'resize', this._checkForIntersections, true);\n      removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if (this._domObserver) {\n        this._domObserver.disconnect();\n        this._domObserver = null;\n      }\n    }\n  };\n\n  /**\n   * Scans each observation target for intersection changes and adds them\n   * to the internal entries queue. If new entries are found, it\n   * schedules the callback to be invoked.\n   * @private\n   */\n  IntersectionObserver.prototype._checkForIntersections = function () {\n    var rootIsInDom = this._rootIsInDom();\n    var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n    this._observationTargets.forEach(function (item) {\n      var target = item.element;\n      var targetRect = getBoundingClientRect(target);\n      var rootContainsTarget = this._rootContainsTarget(target);\n      var oldEntry = item.entry;\n      var intersectionRect = rootIsInDom && rootContainsTarget && this._computeTargetAndRootIntersection(target, rootRect);\n\n      var newEntry = item.entry = new IntersectionObserverEntry({\n        time: now(),\n        target: target,\n        boundingClientRect: targetRect,\n        rootBounds: rootRect,\n        intersectionRect: intersectionRect\n      });\n\n      if (!oldEntry) {\n        this._queuedEntries.push(newEntry);\n      } else if (rootIsInDom && rootContainsTarget) {\n        // If the new entry intersection ratio has crossed any of the\n        // thresholds, add a new entry.\n        if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n          this._queuedEntries.push(newEntry);\n        }\n      } else {\n        // If the root is not in the DOM or target is not contained within\n        // root but the previous entry for this target had an intersection,\n        // add a new record indicating removal.\n        if (oldEntry && oldEntry.isIntersecting) {\n          this._queuedEntries.push(newEntry);\n        }\n      }\n    }, this);\n\n    if (this._queuedEntries.length) {\n      this._callback(this.takeRecords(), this);\n    }\n  };\n\n  /**\n   * Accepts a target and root rect computes the intersection between then\n   * following the algorithm in the spec.\n   * TODO(philipwalton): at this time clip-path is not considered.\n   * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n   * @param {Element} target The target DOM element\n   * @param {Object} rootRect The bounding rect of the root after being\n   *     expanded by the rootMargin value.\n   * @return {?Object} The final intersection rect object or undefined if no\n   *     intersection is found.\n   * @private\n   */\n  IntersectionObserver.prototype._computeTargetAndRootIntersection = function (target, rootRect) {\n\n    // If the element isn't displayed, an intersection can't happen.\n    if (window.getComputedStyle(target).display == 'none') return;\n\n    var targetRect = getBoundingClientRect(target);\n    var intersectionRect = targetRect;\n    var parent = getParentNode(target);\n    var atRoot = false;\n\n    while (!atRoot) {\n      var parentRect = null;\n      var parentComputedStyle = parent.nodeType == 1 ? window.getComputedStyle(parent) : {};\n\n      // If the parent isn't displayed, an intersection can't happen.\n      if (parentComputedStyle.display == 'none') return;\n\n      if (parent == this.root || parent == document) {\n        atRoot = true;\n        parentRect = rootRect;\n      } else {\n        // If the element has a non-visible overflow, and it's not the <body>\n        // or <html> element, update the intersection rect.\n        // Note: <body> and <html> cannot be clipped to a rect that's not also\n        // the document rect, so no need to compute a new intersection.\n        if (parent != document.body && parent != document.documentElement && parentComputedStyle.overflow != 'visible') {\n          parentRect = getBoundingClientRect(parent);\n        }\n      }\n\n      // If either of the above conditionals set a new parentRect,\n      // calculate new intersection data.\n      if (parentRect) {\n        intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n\n        if (!intersectionRect) break;\n      }\n      parent = getParentNode(parent);\n    }\n    return intersectionRect;\n  };\n\n  /**\n   * Returns the root rect after being expanded by the rootMargin value.\n   * @return {Object} The expanded root rect.\n   * @private\n   */\n  IntersectionObserver.prototype._getRootRect = function () {\n    var rootRect;\n    if (this.root) {\n      rootRect = getBoundingClientRect(this.root);\n    } else {\n      // Use <html>/<body> instead of window since scroll bars affect size.\n      var html = document.documentElement;\n      var body = document.body;\n      rootRect = {\n        top: 0,\n        left: 0,\n        right: html.clientWidth || body.clientWidth,\n        width: html.clientWidth || body.clientWidth,\n        bottom: html.clientHeight || body.clientHeight,\n        height: html.clientHeight || body.clientHeight\n      };\n    }\n    return this._expandRectByRootMargin(rootRect);\n  };\n\n  /**\n   * Accepts a rect and expands it by the rootMargin value.\n   * @param {Object} rect The rect object to expand.\n   * @return {Object} The expanded rect.\n   * @private\n   */\n  IntersectionObserver.prototype._expandRectByRootMargin = function (rect) {\n    var margins = this._rootMarginValues.map(function (margin, i) {\n      return margin.unit == 'px' ? margin.value : margin.value * (i % 2 ? rect.width : rect.height) / 100;\n    });\n    var newRect = {\n      top: rect.top - margins[0],\n      right: rect.right + margins[1],\n      bottom: rect.bottom + margins[2],\n      left: rect.left - margins[3]\n    };\n    newRect.width = newRect.right - newRect.left;\n    newRect.height = newRect.bottom - newRect.top;\n\n    return newRect;\n  };\n\n  /**\n   * Accepts an old and new entry and returns true if at least one of the\n   * threshold values has been crossed.\n   * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n   *    particular target element or null if no previous entry exists.\n   * @param {IntersectionObserverEntry} newEntry The current entry for a\n   *    particular target element.\n   * @return {boolean} Returns true if a any threshold has been crossed.\n   * @private\n   */\n  IntersectionObserver.prototype._hasCrossedThreshold = function (oldEntry, newEntry) {\n\n    // To make comparing easier, an entry that has a ratio of 0\n    // but does not actually intersect is given a value of -1\n    var oldRatio = oldEntry && oldEntry.isIntersecting ? oldEntry.intersectionRatio || 0 : -1;\n    var newRatio = newEntry.isIntersecting ? newEntry.intersectionRatio || 0 : -1;\n\n    // Ignore unchanged ratios\n    if (oldRatio === newRatio) return;\n\n    for (var i = 0; i < this.thresholds.length; i++) {\n      var threshold = this.thresholds[i];\n\n      // Return true if an entry matches a threshold or if the new ratio\n      // and the old ratio are on the opposite sides of a threshold.\n      if (threshold == oldRatio || threshold == newRatio || threshold < oldRatio !== threshold < newRatio) {\n        return true;\n      }\n    }\n  };\n\n  /**\n   * Returns whether or not the root element is an element and is in the DOM.\n   * @return {boolean} True if the root element is an element and is in the DOM.\n   * @private\n   */\n  IntersectionObserver.prototype._rootIsInDom = function () {\n    return !this.root || containsDeep(document, this.root);\n  };\n\n  /**\n   * Returns whether or not the target element is a child of root.\n   * @param {Element} target The target element to check.\n   * @return {boolean} True if the target element is a child of root.\n   * @private\n   */\n  IntersectionObserver.prototype._rootContainsTarget = function (target) {\n    return containsDeep(this.root || document, target);\n  };\n\n  /**\n   * Adds the instance to the global IntersectionObserver registry if it isn't\n   * already present.\n   * @private\n   */\n  IntersectionObserver.prototype._registerInstance = function () {\n    if (registry.indexOf(this) < 0) {\n      registry.push(this);\n    }\n  };\n\n  /**\n   * Removes the instance from the global IntersectionObserver registry.\n   * @private\n   */\n  IntersectionObserver.prototype._unregisterInstance = function () {\n    var index = registry.indexOf(this);\n    if (index != -1) registry.splice(index, 1);\n  };\n\n  /**\n   * Returns the result of the performance.now() method or null in browsers\n   * that don't support the API.\n   * @return {number} The elapsed time since the page was requested.\n   */\n  function now() {\n    return window.performance && performance.now && performance.now();\n  }\n\n  /**\n   * Throttles a function and delays its executiong, so it's only called at most\n   * once within a given time period.\n   * @param {Function} fn The function to throttle.\n   * @param {number} timeout The amount of time that must pass before the\n   *     function can be called again.\n   * @return {Function} The throttled function.\n   */\n  function throttle(fn, timeout) {\n    var timer = null;\n    return function () {\n      if (!timer) {\n        timer = setTimeout(function () {\n          fn();\n          timer = null;\n        }, timeout);\n      }\n    };\n  }\n\n  /**\n   * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n   * @param {Node} node The DOM node to add the event handler to.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to add.\n   * @param {boolean} opt_useCapture Optionally adds the even to the capture\n   *     phase. Note: this only works in modern browsers.\n   */\n  function addEvent(node, event, fn, opt_useCapture) {\n    if (typeof node.addEventListener == 'function') {\n      node.addEventListener(event, fn, opt_useCapture || false);\n    } else if (typeof node.attachEvent == 'function') {\n      node.attachEvent('on' + event, fn);\n    }\n  }\n\n  /**\n   * Removes a previously added event handler from a DOM node.\n   * @param {Node} node The DOM node to remove the event handler from.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to remove.\n   * @param {boolean} opt_useCapture If the event handler was added with this\n   *     flag set to true, it should be set to true here in order to remove it.\n   */\n  function removeEvent(node, event, fn, opt_useCapture) {\n    if (typeof node.removeEventListener == 'function') {\n      node.removeEventListener(event, fn, opt_useCapture || false);\n    } else if (typeof node.detatchEvent == 'function') {\n      node.detatchEvent('on' + event, fn);\n    }\n  }\n\n  /**\n   * Returns the intersection between two rect objects.\n   * @param {Object} rect1 The first rect.\n   * @param {Object} rect2 The second rect.\n   * @return {?Object} The intersection rect or undefined if no intersection\n   *     is found.\n   */\n  function computeRectIntersection(rect1, rect2) {\n    var top = Math.max(rect1.top, rect2.top);\n    var bottom = Math.min(rect1.bottom, rect2.bottom);\n    var left = Math.max(rect1.left, rect2.left);\n    var right = Math.min(rect1.right, rect2.right);\n    var width = right - left;\n    var height = bottom - top;\n\n    return width >= 0 && height >= 0 && {\n      top: top,\n      bottom: bottom,\n      left: left,\n      right: right,\n      width: width,\n      height: height\n    };\n  }\n\n  /**\n   * Shims the native getBoundingClientRect for compatibility with older IE.\n   * @param {Element} el The element whose bounding rect to get.\n   * @return {Object} The (possibly shimmed) rect of the element.\n   */\n  function getBoundingClientRect(el) {\n    var rect;\n\n    try {\n      rect = el.getBoundingClientRect();\n    } catch (err) {\n      // Ignore Windows 7 IE11 \"Unspecified error\"\n      // https://github.com/w3c/IntersectionObserver/pull/205\n    }\n\n    if (!rect) return getEmptyRect();\n\n    // Older IE\n    if (!(rect.width && rect.height)) {\n      rect = {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.right - rect.left,\n        height: rect.bottom - rect.top\n      };\n    }\n    return rect;\n  }\n\n  /**\n   * Returns an empty rect object. An empty rect is returned when an element\n   * is not in the DOM.\n   * @return {Object} The empty rect.\n   */\n  function getEmptyRect() {\n    return {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      width: 0,\n      height: 0\n    };\n  }\n\n  /**\n   * Checks to see if a parent element contains a child elemnt (including inside\n   * shadow DOM).\n   * @param {Node} parent The parent element.\n   * @param {Node} child The child element.\n   * @return {boolean} True if the parent node contains the child node.\n   */\n  function containsDeep(parent, child) {\n    var node = child;\n    while (node) {\n      if (node == parent) return true;\n\n      node = getParentNode(node);\n    }\n    return false;\n  }\n\n  /**\n   * Gets the parent node of an element or its host element if the parent node\n   * is a shadow root.\n   * @param {Node} node The node whose parent to get.\n   * @return {Node|null} The parent node or null if no parent exists.\n   */\n  function getParentNode(node) {\n    var parent = node.parentNode;\n\n    if (parent && parent.nodeType == 11 && parent.host) {\n      // If the parent is a shadow root, return the host element.\n      return parent.host;\n    }\n    return parent;\n  }\n\n  // Exposes the constructors globally.\n  window.IntersectionObserver = IntersectionObserver;\n  window.IntersectionObserverEntry = IntersectionObserverEntry;\n})(window, document);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 0.js","import './poly';\n\nconst options = {\n  root: null,\n  rootMargin: '50px 0px',\n  threshold: 0.01,\n};\n\nfunction loadImage(src) {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.addEventListener('load', resolve);\n    img.addEventListener('error', reject);\n    img.src = src;\n  });\n}\n\nfunction intersectionCb(entries, observer) {\n  let i = entries.length;\n  for (; i--;) {\n    const entry = entries[i];\n    const node = entry.target;\n    if (entry.intersectionRatio > 0) {\n      observer.unobserve(entry.target);\n      loadImage(node.dataset.src).then(() => {\n        node.src = node.dataset.src;\n      }).catch(() => {\n        // noop\n      });\n    }\n  }\n}\n\nexport const observer = new IntersectionObserver(intersectionCb, options);\n\nfunction observe(node) {\n  observer.observe(node);\n}\n\nexport default observe;\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/components/LazyLoad/observer.js","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(window, document) {\n    'use strict';\n\n\n    // Exits early if all IntersectionObserver and IntersectionObserverEntry\n    // features are natively supported.\n    if ('IntersectionObserver' in window &&\n        'IntersectionObserverEntry' in window &&\n        'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n      // Minimal polyfill for Edge 15's lack of `isIntersecting`\n      // See: https://github.com/w3c/IntersectionObserver/issues/211\n      if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n        Object.defineProperty(window.IntersectionObserverEntry.prototype,\n          'isIntersecting', {\n          get: function () {\n            return this.intersectionRatio > 0;\n          }\n        });\n      }\n      return;\n    }\n\n\n    /**\n     * An IntersectionObserver registry. This registry exists to hold a strong\n     * reference to IntersectionObserver instances currently observering a target\n     * element. Without this registry, instances without another reference may be\n     * garbage collected.\n     */\n    var registry = [];\n\n\n    /**\n     * Creates the global IntersectionObserverEntry constructor.\n     * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n     * @param {Object} entry A dictionary of instance properties.\n     * @constructor\n     */\n    function IntersectionObserverEntry(entry) {\n      this.time = entry.time;\n      this.target = entry.target;\n      this.rootBounds = entry.rootBounds;\n      this.boundingClientRect = entry.boundingClientRect;\n      this.intersectionRect = entry.intersectionRect || getEmptyRect();\n      this.isIntersecting = !!entry.intersectionRect;\n\n      // Calculates the intersection ratio.\n      var targetRect = this.boundingClientRect;\n      var targetArea = targetRect.width * targetRect.height;\n      var intersectionRect = this.intersectionRect;\n      var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n      // Sets intersection ratio.\n      if (targetArea) {\n        this.intersectionRatio = intersectionArea / targetArea;\n      } else {\n        // If area is zero and is intersecting, sets to 1, otherwise to 0\n        this.intersectionRatio = this.isIntersecting ? 1 : 0;\n      }\n    }\n\n\n    /**\n     * Creates the global IntersectionObserver constructor.\n     * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n     * @param {Function} callback The function to be invoked after intersection\n     *     changes have queued. The function is not invoked if the queue has\n     *     been emptied by calling the `takeRecords` method.\n     * @param {Object=} opt_options Optional configuration options.\n     * @constructor\n     */\n    function IntersectionObserver(callback, opt_options) {\n\n      var options = opt_options || {};\n\n      if (typeof callback != 'function') {\n        throw new Error('callback must be a function');\n      }\n\n      if (options.root && options.root.nodeType != 1) {\n        throw new Error('root must be an Element');\n      }\n\n      // Binds and throttles `this._checkForIntersections`.\n      this._checkForIntersections = throttle(\n          this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n      // Private properties.\n      this._callback = callback;\n      this._observationTargets = [];\n      this._queuedEntries = [];\n      this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n      // Public properties.\n      this.thresholds = this._initThresholds(options.threshold);\n      this.root = options.root || null;\n      this.rootMargin = this._rootMarginValues.map(function(margin) {\n        return margin.value + margin.unit;\n      }).join(' ');\n    }\n\n\n    /**\n     * The minimum interval within which the document will be checked for\n     * intersection changes.\n     */\n    IntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n    /**\n     * The frequency in which the polyfill polls for intersection changes.\n     * this can be updated on a per instance basis and must be set prior to\n     * calling `observe` on the first target.\n     */\n    IntersectionObserver.prototype.POLL_INTERVAL = null;\n\n\n    /**\n     * Starts observing a target element for intersection changes based on\n     * the thresholds values.\n     * @param {Element} target The DOM element to observe.\n     */\n    IntersectionObserver.prototype.observe = function(target) {\n      // If the target is already being observed, do nothing.\n      if (this._observationTargets.some(function(item) {\n        return item.element == target;\n      })) {\n        return;\n      }\n\n      if (!(target && target.nodeType == 1)) {\n        throw new Error('target must be an Element');\n      }\n\n      this._registerInstance();\n      this._observationTargets.push({element: target, entry: null});\n      this._monitorIntersections();\n      this._checkForIntersections();\n    };\n\n\n    /**\n     * Stops observing a target element for intersection changes.\n     * @param {Element} target The DOM element to observe.\n     */\n    IntersectionObserver.prototype.unobserve = function(target) {\n      this._observationTargets =\n          this._observationTargets.filter(function(item) {\n\n        return item.element != target;\n      });\n      if (!this._observationTargets.length) {\n        this._unmonitorIntersections();\n        this._unregisterInstance();\n      }\n    };\n\n\n    /**\n     * Stops observing all target elements for intersection changes.\n     */\n    IntersectionObserver.prototype.disconnect = function() {\n      this._observationTargets = [];\n      this._unmonitorIntersections();\n      this._unregisterInstance();\n    };\n\n\n    /**\n     * Returns any queue entries that have not yet been reported to the\n     * callback and clears the queue. This can be used in conjunction with the\n     * callback to obtain the absolute most up-to-date intersection information.\n     * @return {Array} The currently queued entries.\n     */\n    IntersectionObserver.prototype.takeRecords = function() {\n      var records = this._queuedEntries.slice();\n      this._queuedEntries = [];\n      return records;\n    };\n\n\n    /**\n     * Accepts the threshold value from the user configuration object and\n     * returns a sorted array of unique threshold values. If a value is not\n     * between 0 and 1 and error is thrown.\n     * @private\n     * @param {Array|number=} opt_threshold An optional threshold value or\n     *     a list of threshold values, defaulting to [0].\n     * @return {Array} A sorted list of unique and valid threshold values.\n     */\n    IntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n      var threshold = opt_threshold || [0];\n      if (!Array.isArray(threshold)) threshold = [threshold];\n\n      return threshold.sort().filter(function(t, i, a) {\n        if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n          throw new Error('threshold must be a number between 0 and 1 inclusively');\n        }\n        return t !== a[i - 1];\n      });\n    };\n\n\n    /**\n     * Accepts the rootMargin value from the user configuration object\n     * and returns an array of the four margin values as an object containing\n     * the value and unit properties. If any of the values are not properly\n     * formatted or use a unit other than px or %, and error is thrown.\n     * @private\n     * @param {string=} opt_rootMargin An optional rootMargin value,\n     *     defaulting to '0px'.\n     * @return {Array<Object>} An array of margin objects with the keys\n     *     value and unit.\n     */\n    IntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n      var marginString = opt_rootMargin || '0px';\n      var margins = marginString.split(/\\s+/).map(function(margin) {\n        var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n        if (!parts) {\n          throw new Error('rootMargin must be specified in pixels or percent');\n        }\n        return {value: parseFloat(parts[1]), unit: parts[2]};\n      });\n\n      // Handles shorthand.\n      margins[1] = margins[1] || margins[0];\n      margins[2] = margins[2] || margins[0];\n      margins[3] = margins[3] || margins[1];\n\n      return margins;\n    };\n\n\n    /**\n     * Starts polling for intersection changes if the polling is not already\n     * happening, and if the page's visibilty state is visible.\n     * @private\n     */\n    IntersectionObserver.prototype._monitorIntersections = function() {\n      if (!this._monitoringIntersections) {\n        this._monitoringIntersections = true;\n\n        // If a poll interval is set, use polling instead of listening to\n        // resize and scroll events or DOM mutations.\n        if (this.POLL_INTERVAL) {\n          this._monitoringInterval = setInterval(\n              this._checkForIntersections, this.POLL_INTERVAL);\n        }\n        else {\n          addEvent(window, 'resize', this._checkForIntersections, true);\n          addEvent(document, 'scroll', this._checkForIntersections, true);\n\n          if ('MutationObserver' in window) {\n            this._domObserver = new MutationObserver(this._checkForIntersections);\n            this._domObserver.observe(document, {\n              attributes: true,\n              childList: true,\n              characterData: true,\n              subtree: true\n            });\n          }\n        }\n      }\n    };\n\n\n    /**\n     * Stops polling for intersection changes.\n     * @private\n     */\n    IntersectionObserver.prototype._unmonitorIntersections = function() {\n      if (this._monitoringIntersections) {\n        this._monitoringIntersections = false;\n\n        clearInterval(this._monitoringInterval);\n        this._monitoringInterval = null;\n\n        removeEvent(window, 'resize', this._checkForIntersections, true);\n        removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n        if (this._domObserver) {\n          this._domObserver.disconnect();\n          this._domObserver = null;\n        }\n      }\n    };\n\n\n    /**\n     * Scans each observation target for intersection changes and adds them\n     * to the internal entries queue. If new entries are found, it\n     * schedules the callback to be invoked.\n     * @private\n     */\n    IntersectionObserver.prototype._checkForIntersections = function() {\n      var rootIsInDom = this._rootIsInDom();\n      var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n      this._observationTargets.forEach(function(item) {\n        var target = item.element;\n        var targetRect = getBoundingClientRect(target);\n        var rootContainsTarget = this._rootContainsTarget(target);\n        var oldEntry = item.entry;\n        var intersectionRect = rootIsInDom && rootContainsTarget &&\n            this._computeTargetAndRootIntersection(target, rootRect);\n\n        var newEntry = item.entry = new IntersectionObserverEntry({\n          time: now(),\n          target: target,\n          boundingClientRect: targetRect,\n          rootBounds: rootRect,\n          intersectionRect: intersectionRect\n        });\n\n        if (!oldEntry) {\n          this._queuedEntries.push(newEntry);\n        } else if (rootIsInDom && rootContainsTarget) {\n          // If the new entry intersection ratio has crossed any of the\n          // thresholds, add a new entry.\n          if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n            this._queuedEntries.push(newEntry);\n          }\n        } else {\n          // If the root is not in the DOM or target is not contained within\n          // root but the previous entry for this target had an intersection,\n          // add a new record indicating removal.\n          if (oldEntry && oldEntry.isIntersecting) {\n            this._queuedEntries.push(newEntry);\n          }\n        }\n      }, this);\n\n      if (this._queuedEntries.length) {\n        this._callback(this.takeRecords(), this);\n      }\n    };\n\n\n    /**\n     * Accepts a target and root rect computes the intersection between then\n     * following the algorithm in the spec.\n     * TODO(philipwalton): at this time clip-path is not considered.\n     * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n     * @param {Element} target The target DOM element\n     * @param {Object} rootRect The bounding rect of the root after being\n     *     expanded by the rootMargin value.\n     * @return {?Object} The final intersection rect object or undefined if no\n     *     intersection is found.\n     * @private\n     */\n    IntersectionObserver.prototype._computeTargetAndRootIntersection =\n        function(target, rootRect) {\n\n      // If the element isn't displayed, an intersection can't happen.\n      if (window.getComputedStyle(target).display == 'none') return;\n\n      var targetRect = getBoundingClientRect(target);\n      var intersectionRect = targetRect;\n      var parent = getParentNode(target);\n      var atRoot = false;\n\n      while (!atRoot) {\n        var parentRect = null;\n        var parentComputedStyle = parent.nodeType == 1 ?\n            window.getComputedStyle(parent) : {};\n\n        // If the parent isn't displayed, an intersection can't happen.\n        if (parentComputedStyle.display == 'none') return;\n\n        if (parent == this.root || parent == document) {\n          atRoot = true;\n          parentRect = rootRect;\n        } else {\n          // If the element has a non-visible overflow, and it's not the <body>\n          // or <html> element, update the intersection rect.\n          // Note: <body> and <html> cannot be clipped to a rect that's not also\n          // the document rect, so no need to compute a new intersection.\n          if (parent != document.body &&\n              parent != document.documentElement &&\n              parentComputedStyle.overflow != 'visible') {\n            parentRect = getBoundingClientRect(parent);\n          }\n        }\n\n        // If either of the above conditionals set a new parentRect,\n        // calculate new intersection data.\n        if (parentRect) {\n          intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n\n          if (!intersectionRect) break;\n        }\n        parent = getParentNode(parent);\n      }\n      return intersectionRect;\n    };\n\n\n    /**\n     * Returns the root rect after being expanded by the rootMargin value.\n     * @return {Object} The expanded root rect.\n     * @private\n     */\n    IntersectionObserver.prototype._getRootRect = function() {\n      var rootRect;\n      if (this.root) {\n        rootRect = getBoundingClientRect(this.root);\n      } else {\n        // Use <html>/<body> instead of window since scroll bars affect size.\n        var html = document.documentElement;\n        var body = document.body;\n        rootRect = {\n          top: 0,\n          left: 0,\n          right: html.clientWidth || body.clientWidth,\n          width: html.clientWidth || body.clientWidth,\n          bottom: html.clientHeight || body.clientHeight,\n          height: html.clientHeight || body.clientHeight\n        };\n      }\n      return this._expandRectByRootMargin(rootRect);\n    };\n\n\n    /**\n     * Accepts a rect and expands it by the rootMargin value.\n     * @param {Object} rect The rect object to expand.\n     * @return {Object} The expanded rect.\n     * @private\n     */\n    IntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n      var margins = this._rootMarginValues.map(function(margin, i) {\n        return margin.unit == 'px' ? margin.value :\n            margin.value * (i % 2 ? rect.width : rect.height) / 100;\n      });\n      var newRect = {\n        top: rect.top - margins[0],\n        right: rect.right + margins[1],\n        bottom: rect.bottom + margins[2],\n        left: rect.left - margins[3]\n      };\n      newRect.width = newRect.right - newRect.left;\n      newRect.height = newRect.bottom - newRect.top;\n\n      return newRect;\n    };\n\n\n    /**\n     * Accepts an old and new entry and returns true if at least one of the\n     * threshold values has been crossed.\n     * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n     *    particular target element or null if no previous entry exists.\n     * @param {IntersectionObserverEntry} newEntry The current entry for a\n     *    particular target element.\n     * @return {boolean} Returns true if a any threshold has been crossed.\n     * @private\n     */\n    IntersectionObserver.prototype._hasCrossedThreshold =\n        function(oldEntry, newEntry) {\n\n      // To make comparing easier, an entry that has a ratio of 0\n      // but does not actually intersect is given a value of -1\n      var oldRatio = oldEntry && oldEntry.isIntersecting ?\n          oldEntry.intersectionRatio || 0 : -1;\n      var newRatio = newEntry.isIntersecting ?\n          newEntry.intersectionRatio || 0 : -1;\n\n      // Ignore unchanged ratios\n      if (oldRatio === newRatio) return;\n\n      for (var i = 0; i < this.thresholds.length; i++) {\n        var threshold = this.thresholds[i];\n\n        // Return true if an entry matches a threshold or if the new ratio\n        // and the old ratio are on the opposite sides of a threshold.\n        if (threshold == oldRatio || threshold == newRatio ||\n            threshold < oldRatio !== threshold < newRatio) {\n          return true;\n        }\n      }\n    };\n\n\n    /**\n     * Returns whether or not the root element is an element and is in the DOM.\n     * @return {boolean} True if the root element is an element and is in the DOM.\n     * @private\n     */\n    IntersectionObserver.prototype._rootIsInDom = function() {\n      return !this.root || containsDeep(document, this.root);\n    };\n\n\n    /**\n     * Returns whether or not the target element is a child of root.\n     * @param {Element} target The target element to check.\n     * @return {boolean} True if the target element is a child of root.\n     * @private\n     */\n    IntersectionObserver.prototype._rootContainsTarget = function(target) {\n      return containsDeep(this.root || document, target);\n    };\n\n\n    /**\n     * Adds the instance to the global IntersectionObserver registry if it isn't\n     * already present.\n     * @private\n     */\n    IntersectionObserver.prototype._registerInstance = function() {\n      if (registry.indexOf(this) < 0) {\n        registry.push(this);\n      }\n    };\n\n\n    /**\n     * Removes the instance from the global IntersectionObserver registry.\n     * @private\n     */\n    IntersectionObserver.prototype._unregisterInstance = function() {\n      var index = registry.indexOf(this);\n      if (index != -1) registry.splice(index, 1);\n    };\n\n\n    /**\n     * Returns the result of the performance.now() method or null in browsers\n     * that don't support the API.\n     * @return {number} The elapsed time since the page was requested.\n     */\n    function now() {\n      return window.performance && performance.now && performance.now();\n    }\n\n\n    /**\n     * Throttles a function and delays its executiong, so it's only called at most\n     * once within a given time period.\n     * @param {Function} fn The function to throttle.\n     * @param {number} timeout The amount of time that must pass before the\n     *     function can be called again.\n     * @return {Function} The throttled function.\n     */\n    function throttle(fn, timeout) {\n      var timer = null;\n      return function () {\n        if (!timer) {\n          timer = setTimeout(function() {\n            fn();\n            timer = null;\n          }, timeout);\n        }\n      };\n    }\n\n\n    /**\n     * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n     * @param {Node} node The DOM node to add the event handler to.\n     * @param {string} event The event name.\n     * @param {Function} fn The event handler to add.\n     * @param {boolean} opt_useCapture Optionally adds the even to the capture\n     *     phase. Note: this only works in modern browsers.\n     */\n    function addEvent(node, event, fn, opt_useCapture) {\n      if (typeof node.addEventListener == 'function') {\n        node.addEventListener(event, fn, opt_useCapture || false);\n      }\n      else if (typeof node.attachEvent == 'function') {\n        node.attachEvent('on' + event, fn);\n      }\n    }\n\n\n    /**\n     * Removes a previously added event handler from a DOM node.\n     * @param {Node} node The DOM node to remove the event handler from.\n     * @param {string} event The event name.\n     * @param {Function} fn The event handler to remove.\n     * @param {boolean} opt_useCapture If the event handler was added with this\n     *     flag set to true, it should be set to true here in order to remove it.\n     */\n    function removeEvent(node, event, fn, opt_useCapture) {\n      if (typeof node.removeEventListener == 'function') {\n        node.removeEventListener(event, fn, opt_useCapture || false);\n      }\n      else if (typeof node.detatchEvent == 'function') {\n        node.detatchEvent('on' + event, fn);\n      }\n    }\n\n\n    /**\n     * Returns the intersection between two rect objects.\n     * @param {Object} rect1 The first rect.\n     * @param {Object} rect2 The second rect.\n     * @return {?Object} The intersection rect or undefined if no intersection\n     *     is found.\n     */\n    function computeRectIntersection(rect1, rect2) {\n      var top = Math.max(rect1.top, rect2.top);\n      var bottom = Math.min(rect1.bottom, rect2.bottom);\n      var left = Math.max(rect1.left, rect2.left);\n      var right = Math.min(rect1.right, rect2.right);\n      var width = right - left;\n      var height = bottom - top;\n\n      return (width >= 0 && height >= 0) && {\n        top: top,\n        bottom: bottom,\n        left: left,\n        right: right,\n        width: width,\n        height: height\n      };\n    }\n\n\n    /**\n     * Shims the native getBoundingClientRect for compatibility with older IE.\n     * @param {Element} el The element whose bounding rect to get.\n     * @return {Object} The (possibly shimmed) rect of the element.\n     */\n    function getBoundingClientRect(el) {\n      var rect;\n\n      try {\n        rect = el.getBoundingClientRect();\n      } catch (err) {\n        // Ignore Windows 7 IE11 \"Unspecified error\"\n        // https://github.com/w3c/IntersectionObserver/pull/205\n      }\n\n      if (!rect) return getEmptyRect();\n\n      // Older IE\n      if (!(rect.width && rect.height)) {\n        rect = {\n          top: rect.top,\n          right: rect.right,\n          bottom: rect.bottom,\n          left: rect.left,\n          width: rect.right - rect.left,\n          height: rect.bottom - rect.top\n        };\n      }\n      return rect;\n    }\n\n\n    /**\n     * Returns an empty rect object. An empty rect is returned when an element\n     * is not in the DOM.\n     * @return {Object} The empty rect.\n     */\n    function getEmptyRect() {\n      return {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        width: 0,\n        height: 0\n      };\n    }\n\n    /**\n     * Checks to see if a parent element contains a child elemnt (including inside\n     * shadow DOM).\n     * @param {Node} parent The parent element.\n     * @param {Node} child The child element.\n     * @return {boolean} True if the parent node contains the child node.\n     */\n    function containsDeep(parent, child) {\n      var node = child;\n      while (node) {\n        if (node == parent) return true;\n\n        node = getParentNode(node);\n      }\n      return false;\n    }\n\n\n    /**\n     * Gets the parent node of an element or its host element if the parent node\n     * is a shadow root.\n     * @param {Node} node The node whose parent to get.\n     * @return {Node|null} The parent node or null if no parent exists.\n     */\n    function getParentNode(node) {\n      var parent = node.parentNode;\n\n      if (parent && parent.nodeType == 11 && parent.host) {\n        // If the parent is a shadow root, return the host element.\n        return parent.host;\n      }\n      return parent;\n    }\n\n\n    // Exposes the constructors globally.\n    window.IntersectionObserver = IntersectionObserver;\n    window.IntersectionObserverEntry = IntersectionObserverEntry;\n\n    }(window, document));\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/components/LazyLoad/poly.js"],"sourceRoot":""}